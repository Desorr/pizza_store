import os
from aiogram import Router, types
from aiogram.types import Message
from aiogram.types import CallbackQuery

from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import orm_get_user_carts, orm_clear_user_cart

pay_redsys_router = Router()

# –¢–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
REDSYS_TEST_PROVIDER_TOKEN = os.getenv("REDSYS_TEST_PROVIDER_TOKEN")


@pay_redsys_router.callback_query(lambda callback: callback.data == "process_order")
async def handle_process_order(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    carts = await orm_get_user_carts(session, user_id)

    description_lines = [
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {cart.product.name} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart.quantity} –¶–µ–Ω–∞: {cart.product.price * cart.quantity} USD"
        for cart in carts
    ]
    description = "\n".join(description_lines)

    total_amount_cents = int(sum(cart.product.price * cart.quantity for cart in carts) * 100)

    prices = [
        types.LabeledPrice(
            label="–í–∞—à –∑–∞–∫–∞–∑",
            amount=total_amount_cents
        )
    ]
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞
    try:
        await callback.bot.send_invoice(
            chat_id=user_id,
            title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            description=description,
            payload='–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑',
            provider_token=REDSYS_TEST_PROVIDER_TOKEN,
            currency="USD",
            prices=prices,
            start_parameter="payment"
        )
    except Exception as e:
        print(f"Error sending invoice: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞.")
        return

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@pay_redsys_router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@pay_redsys_router.message(lambda message: message.successful_payment is not None)
async def successful_payment_handler(message: Message, session: AsyncSession):
    payment_info = message.successful_payment
    await message.answer(
        text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! üéâ\n"
             f"–°—É–º–º–∞: {payment_info.total_amount / 100:.2f} {payment_info.currency}\n"
             f"–í—ã –∫—É–ø–∏–ª–∏: {payment_info.invoice_payload}"
    )
    await orm_clear_user_cart(session, message.from_user.id) # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É